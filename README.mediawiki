__NOTOC__
= '''gctools''' - a collection of useful scripts for Geocaching =

These scripts have been written and tested on GNU/Linux. Your experience on other operation systems may vary. Feedback and patches are welcome.

== gc_get_spoiler_pics.py ==
Takes a geocaching.com pocket-query .gpx-file and trawls the geocaching.com homepage for spoilerpics.
The downloaded images can be geotagged with the geocache's coordinates and/or sorted into directories compatible with the Garmin GeocachePhoto feature on newer Garmin handheld GPS devices.  (e.g. Oregon x50, Montana, etc with newest Firmware)

Once the images are downloaded you can either put them into the <tt>Garmin/GeocachePhotos/</tt> folder on your Garmin handheld gps in which case a "Show Photos" menu-entry will appear on your device on Geocaches with images.

Or you can put them into your gps handhelds image folder where they will appear as Photo waypoints on your Map if your GPS handheld supports geotagged photos. e.g. <tt>Garmin/JPEG/</tt> on Garmin devices. In this case the <tt>--flat</tt> option may be helpful.

==== Requirements ====

* python3
* python3-lxml
* imagemagick
* exiftool (libimage-exiftool-perl)


==== Usage ====

 Syntax:
   /home/bernhard/gc_get_spoiler_pics.py [options] <pq-gpx-file> [pq-gpx-file2 [...]]
 
 Options:
   --lat_offset <degrees>      Latitude Offset for Images Geotag
   --lon_offset <degrees>      Longitude Offset for Images Geotag
   --savedir <dir>             Directory to save images in
   --filter </regex/>          Regex that needs to match the Image Description
   --threads <num>             use <num> threads, 0 disables threading, default is number of CPUs
   --flat               put all photos in one directory instead of sorting them into GeocachePhotos
   -s | --skip_present         skip GC if at least one picture of GC present in savedir
   -d | --done_file <filename> use and update list of previously downloaded data
   -g | --no_geotag            don't geotag images
   -x | --delete_old           delete images of gc not found in given gpx
   -h | --help                 Show this Help

; <tt>--lat/lon_offset</tt>
: when geotagging images with the geocaches's coordinates, per default a slight offset is added so when viewing the Map on your GPS handheld, the image icon won't hide the geocache icon.
: this option allows you to specify a different or 0 offset

; <tt>--filter</tt>
: if specified, only images which's description matches the given regular expression are downloaded.
: e.g.:
: <pre>--filter "cache|stage|hinweis|spoiler|hint|area|gegend|karte|wichtig|weg|map|beschreibung|description|blick|view|park|blick|hier|waypoint|track|hiding|place|nah|doserl"</pre>

; <tt>--threads</tt>
: <tt>--threads 18</tt> seems to work well and really speeds things up

; <tt>--flat</tt>
: per default, images are sorted into directories suitable for the <tt>Garmin/GeocachePhotos/ folder.</tt>
: read http://garmin.blogs.com/softwareupdates/2012/01/geocaching-with-photos.html
: <tt>--flat</tt> disables this behaviour. E.g. when you intend to copy the downloaed images into your <tt>Garmin/JPEG/</tt> folder instead of <tt>Garmin/GeocachePhotos/</tt> folder.

; <tt>--done_file ''donefile''</tt>
: the script will use the file ''donefile'' to remember which images from which GeoCaches were previously downloaded and the geocaching.com homepage need not be checked again.
: This is done using a hash of the gpx file's GC description, so the cache is checked for new images if the cache description has changed.

; <tt>--delete_old</tt>
: Delete all images that don't belong to any geocache in any of the given gpx-files.

===== Example =====
This checks all caches in pocket-query 123.gpx for attached pictures that have
either cache, stage or spoiler in their name and downloads them to
<tt>./spoilerpics/</tt> unless ''done.store'' say's they've already been checked:

 /home/bernhard/gc_get_spoiler_pics.py -x --savedir ./spoilerpics/  \
  -d ./spoilerpics/done.store --filter "cache|stage|spoiler" 123.gpx

===== Full HowTo for Ubuntu/Debian Linux, bash and Garmin devices =====
* install required software
  sudo apt-get install python3 python3-lxml imagemagick libimage-exiftool-perl
* Create the folder on your garmin gps handheld
  mkdir /media/GARMIN/garmin/GeocachePhotos/
* Create a pocketquery and save into <tt>/media/GARMIN/Garmin/GPX/</tt>
* use the script
  shopt -s extglob
  ~/gctools/gc_get_spoiler_pics.py --lat_offset 0 --lon_offset 0  \
    --savedir /media/GARMIN/Garmin/GeocachePhotos/      \
    --done_file /media/GARMIN/Garmin/GeocachePhotos/done.store   \
    --delete_old --threads 18 /media/GARMIN/Garmin/GPX/!(*-wpts).gpx

== chngwaypoint.py ==
Change the Coordinates and or Description of a given geocaching.com .gpx-file.

I use this to change the coordinates of mystery-caches I've solved and download only those solved mysteries onto my handheld gps. Thus is can collect solved Mysteries like Traditionals on the road and have the the original hint or any solved description right there on my GPS with me.

==== Requirements ====

* python  	(i.e. python2)
* python-lxml	(i.e. python2-lxml)
* wxwidgets  (python-wxgtk2.8 or higher)


==== Usage ====

Just call it with a gpx-file as argument and a dialog will pop up where you can make changes.

 Sytax:
       ./chngwaypoint.py [options] <gpx-file>
 
 Options:
  -c <coords>           | --coord <coords> Change Coordinates
                          --lat <latitude> Change Latitude
                          --lon <longitud> Change Longitude
  -d <desc>             | --desc <desc>    Change Coordinates
  -t [multi|tradi|myst] | --type <type>    Change Type
  -s <dir>              | --savedir <dir>  Save to directory
  -r                    | --rename         Rename to GCCODE_name.gpx
  -g                    | --gui           Display GUI (default if no option given)
  -h                    | --help          Show Help


== gpx_merge.py ==

Merge two or more gpx-files (e.g. pocket-queries) into one, filtering out any duplicates.

Suppose you generate multiple overlapping pocket-queries, you put them onto your GPS including the <tt>*-wpts.gpx</tt> waypoint files. The fact that some waypoints from those additional waypoint files pop up multiple times (once for each <tt>*-wpts.gpx</tt>) annoys you.
No more !!
Use gpx_merge.py to merge all <tt>*-wpts.gpx</tt> into one <tt>waypoints.gpx</tt> and: problem solved!

==== Requirements ====

* python3
* python3-lxml

==== Usage ====

 Syntax:
   ./gpx_merge.py -o <output-gpx-file> <gpx-file1> [gpx-file2 [...]]
 
 Example:
   ./gpx_merge.py -o london-wpts.gpx london1-wpts.gpx london2-wpts.gpx london3-wpts.gpx


== gc_grab_gpx.py ==

Fetch one or more single-cache GPX files or precompiled pocketqueries from the geocaching.com website. 

==== Requirements ====

* geocaching.com premium membership login
* python  	(i.e. python2)
* python-lxml	(i.e. python2-lxml)
* python-requests (v0.5)

==== Usage ====
  Sytax:
       ./gc_grab_gpx.py [options] <gccode|pqname> [gccode|pqname [...]]
  Options:
       -h           | --help             Show Help
       -d dir       | --gpxdir=dir       Write gpx to this dir
       -a           | --allpq            Download all PocketQueries
       -u username  | --username=gc_user 
       -p password  | --password=gc_pass 
 
 Examples:
   ./gc_grab_gpx.py -u besserverstecker -p wonderwhytheyhateme GC3APJW GC3BFT3 "Events in Graz"
   ./gc_grab_gpx.py -u besserverstecker -p wonderwhytheyhateme -a

== Older Stuff ==

=== Send2GPS ===
Nautilus script (copy to <tt>~/.gnome2/nautilus-scripts/</tt>) that uses ''gpsbabel'' to transfer a selected GPX file to an older usb-connected Garmin GPS (i.e. 60CSx)

=== mkwaypoint.pl ===
Old perl CL script to create create a .gpx and/or .lmx file from given coordinates and description.

=== gc_gpx_garmin.sed ===
Use with Garmin 60CSx or older before transferring the pocket query to your gps. Changes the icon of multi-caches from <tt>Geocache</tt> to <tt>Stadion</tt> (the one with the 3 flags), so you can differentiate between multis and tradis on the go

   sed -r -f ~/gc_gpx_garmin.sed <pocketquery-gpx-file>


